// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.0
// source: grpc/proto/images_handler.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImagesHandlerClient is the client API for ImagesHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImagesHandlerClient interface {
	UploadImage(ctx context.Context, opts ...grpc.CallOption) (ImagesHandler_UploadImageClient, error)
	GetImagesList(ctx context.Context, in *GetImagesListRequest, opts ...grpc.CallOption) (*GetImagesListResponse, error)
	DownloadImage(ctx context.Context, in *DownloadImageRequest, opts ...grpc.CallOption) (ImagesHandler_DownloadImageClient, error)
}

type imagesHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewImagesHandlerClient(cc grpc.ClientConnInterface) ImagesHandlerClient {
	return &imagesHandlerClient{cc}
}

func (c *imagesHandlerClient) UploadImage(ctx context.Context, opts ...grpc.CallOption) (ImagesHandler_UploadImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &ImagesHandler_ServiceDesc.Streams[0], "/proto.ImagesHandler/UploadImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &imagesHandlerUploadImageClient{stream}
	return x, nil
}

type ImagesHandler_UploadImageClient interface {
	Send(*UploadImageRequest) error
	CloseAndRecv() (*UploadImageResponse, error)
	grpc.ClientStream
}

type imagesHandlerUploadImageClient struct {
	grpc.ClientStream
}

func (x *imagesHandlerUploadImageClient) Send(m *UploadImageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *imagesHandlerUploadImageClient) CloseAndRecv() (*UploadImageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadImageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *imagesHandlerClient) GetImagesList(ctx context.Context, in *GetImagesListRequest, opts ...grpc.CallOption) (*GetImagesListResponse, error) {
	out := new(GetImagesListResponse)
	err := c.cc.Invoke(ctx, "/proto.ImagesHandler/GetImagesList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesHandlerClient) DownloadImage(ctx context.Context, in *DownloadImageRequest, opts ...grpc.CallOption) (ImagesHandler_DownloadImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &ImagesHandler_ServiceDesc.Streams[1], "/proto.ImagesHandler/DownloadImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &imagesHandlerDownloadImageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ImagesHandler_DownloadImageClient interface {
	Recv() (*DownloadImageResponse, error)
	grpc.ClientStream
}

type imagesHandlerDownloadImageClient struct {
	grpc.ClientStream
}

func (x *imagesHandlerDownloadImageClient) Recv() (*DownloadImageResponse, error) {
	m := new(DownloadImageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ImagesHandlerServer is the server API for ImagesHandler service.
// All implementations must embed UnimplementedImagesHandlerServer
// for forward compatibility
type ImagesHandlerServer interface {
	UploadImage(ImagesHandler_UploadImageServer) error
	GetImagesList(context.Context, *GetImagesListRequest) (*GetImagesListResponse, error)
	DownloadImage(*DownloadImageRequest, ImagesHandler_DownloadImageServer) error
	mustEmbedUnimplementedImagesHandlerServer()
}

// UnimplementedImagesHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedImagesHandlerServer struct {
}

func (UnimplementedImagesHandlerServer) UploadImage(ImagesHandler_UploadImageServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (UnimplementedImagesHandlerServer) GetImagesList(context.Context, *GetImagesListRequest) (*GetImagesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImagesList not implemented")
}
func (UnimplementedImagesHandlerServer) DownloadImage(*DownloadImageRequest, ImagesHandler_DownloadImageServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadImage not implemented")
}
func (UnimplementedImagesHandlerServer) mustEmbedUnimplementedImagesHandlerServer() {}

// UnsafeImagesHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImagesHandlerServer will
// result in compilation errors.
type UnsafeImagesHandlerServer interface {
	mustEmbedUnimplementedImagesHandlerServer()
}

func RegisterImagesHandlerServer(s grpc.ServiceRegistrar, srv ImagesHandlerServer) {
	s.RegisterService(&ImagesHandler_ServiceDesc, srv)
}

func _ImagesHandler_UploadImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImagesHandlerServer).UploadImage(&imagesHandlerUploadImageServer{stream})
}

type ImagesHandler_UploadImageServer interface {
	SendAndClose(*UploadImageResponse) error
	Recv() (*UploadImageRequest, error)
	grpc.ServerStream
}

type imagesHandlerUploadImageServer struct {
	grpc.ServerStream
}

func (x *imagesHandlerUploadImageServer) SendAndClose(m *UploadImageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *imagesHandlerUploadImageServer) Recv() (*UploadImageRequest, error) {
	m := new(UploadImageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ImagesHandler_GetImagesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImagesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesHandlerServer).GetImagesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ImagesHandler/GetImagesList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesHandlerServer).GetImagesList(ctx, req.(*GetImagesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImagesHandler_DownloadImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadImageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImagesHandlerServer).DownloadImage(m, &imagesHandlerDownloadImageServer{stream})
}

type ImagesHandler_DownloadImageServer interface {
	Send(*DownloadImageResponse) error
	grpc.ServerStream
}

type imagesHandlerDownloadImageServer struct {
	grpc.ServerStream
}

func (x *imagesHandlerDownloadImageServer) Send(m *DownloadImageResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ImagesHandler_ServiceDesc is the grpc.ServiceDesc for ImagesHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImagesHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ImagesHandler",
	HandlerType: (*ImagesHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetImagesList",
			Handler:    _ImagesHandler_GetImagesList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadImage",
			Handler:       _ImagesHandler_UploadImage_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadImage",
			Handler:       _ImagesHandler_DownloadImage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc/proto/images_handler.proto",
}
