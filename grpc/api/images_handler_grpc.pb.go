// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.0
// source: grpc/proto/images_handler.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImagesHandlerClient is the client API for ImagesHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImagesHandlerClient interface {
	SetImage(ctx context.Context, opts ...grpc.CallOption) (ImagesHandler_SetImageClient, error)
	GetImagesList(ctx context.Context, in *GetImagesListRequest, opts ...grpc.CallOption) (*GetImagesListResponse, error)
	GetImage(ctx context.Context, in *GetImageRequest, opts ...grpc.CallOption) (ImagesHandler_GetImageClient, error)
}

type imagesHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewImagesHandlerClient(cc grpc.ClientConnInterface) ImagesHandlerClient {
	return &imagesHandlerClient{cc}
}

func (c *imagesHandlerClient) SetImage(ctx context.Context, opts ...grpc.CallOption) (ImagesHandler_SetImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &ImagesHandler_ServiceDesc.Streams[0], "/proto.ImagesHandler/SetImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &imagesHandlerSetImageClient{stream}
	return x, nil
}

type ImagesHandler_SetImageClient interface {
	Send(*SetImageRequest) error
	CloseAndRecv() (*SetImageResponse, error)
	grpc.ClientStream
}

type imagesHandlerSetImageClient struct {
	grpc.ClientStream
}

func (x *imagesHandlerSetImageClient) Send(m *SetImageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *imagesHandlerSetImageClient) CloseAndRecv() (*SetImageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SetImageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *imagesHandlerClient) GetImagesList(ctx context.Context, in *GetImagesListRequest, opts ...grpc.CallOption) (*GetImagesListResponse, error) {
	out := new(GetImagesListResponse)
	err := c.cc.Invoke(ctx, "/proto.ImagesHandler/GetImagesList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesHandlerClient) GetImage(ctx context.Context, in *GetImageRequest, opts ...grpc.CallOption) (ImagesHandler_GetImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &ImagesHandler_ServiceDesc.Streams[1], "/proto.ImagesHandler/GetImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &imagesHandlerGetImageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ImagesHandler_GetImageClient interface {
	Recv() (*GetImageResponse, error)
	grpc.ClientStream
}

type imagesHandlerGetImageClient struct {
	grpc.ClientStream
}

func (x *imagesHandlerGetImageClient) Recv() (*GetImageResponse, error) {
	m := new(GetImageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ImagesHandlerServer is the server API for ImagesHandler service.
// All implementations must embed UnimplementedImagesHandlerServer
// for forward compatibility
type ImagesHandlerServer interface {
	SetImage(ImagesHandler_SetImageServer) error
	GetImagesList(context.Context, *GetImagesListRequest) (*GetImagesListResponse, error)
	GetImage(*GetImageRequest, ImagesHandler_GetImageServer) error
	mustEmbedUnimplementedImagesHandlerServer()
}

// UnimplementedImagesHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedImagesHandlerServer struct {
}

func (UnimplementedImagesHandlerServer) SetImage(ImagesHandler_SetImageServer) error {
	return status.Errorf(codes.Unimplemented, "method SetImage not implemented")
}
func (UnimplementedImagesHandlerServer) GetImagesList(context.Context, *GetImagesListRequest) (*GetImagesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImagesList not implemented")
}
func (UnimplementedImagesHandlerServer) GetImage(*GetImageRequest, ImagesHandler_GetImageServer) error {
	return status.Errorf(codes.Unimplemented, "method GetImage not implemented")
}
func (UnimplementedImagesHandlerServer) mustEmbedUnimplementedImagesHandlerServer() {}

// UnsafeImagesHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImagesHandlerServer will
// result in compilation errors.
type UnsafeImagesHandlerServer interface {
	mustEmbedUnimplementedImagesHandlerServer()
}

func RegisterImagesHandlerServer(s grpc.ServiceRegistrar, srv ImagesHandlerServer) {
	s.RegisterService(&ImagesHandler_ServiceDesc, srv)
}

func _ImagesHandler_SetImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImagesHandlerServer).SetImage(&imagesHandlerSetImageServer{stream})
}

type ImagesHandler_SetImageServer interface {
	SendAndClose(*SetImageResponse) error
	Recv() (*SetImageRequest, error)
	grpc.ServerStream
}

type imagesHandlerSetImageServer struct {
	grpc.ServerStream
}

func (x *imagesHandlerSetImageServer) SendAndClose(m *SetImageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *imagesHandlerSetImageServer) Recv() (*SetImageRequest, error) {
	m := new(SetImageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ImagesHandler_GetImagesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImagesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesHandlerServer).GetImagesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ImagesHandler/GetImagesList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesHandlerServer).GetImagesList(ctx, req.(*GetImagesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImagesHandler_GetImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetImageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImagesHandlerServer).GetImage(m, &imagesHandlerGetImageServer{stream})
}

type ImagesHandler_GetImageServer interface {
	Send(*GetImageResponse) error
	grpc.ServerStream
}

type imagesHandlerGetImageServer struct {
	grpc.ServerStream
}

func (x *imagesHandlerGetImageServer) Send(m *GetImageResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ImagesHandler_ServiceDesc is the grpc.ServiceDesc for ImagesHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImagesHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ImagesHandler",
	HandlerType: (*ImagesHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetImagesList",
			Handler:    _ImagesHandler_GetImagesList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SetImage",
			Handler:       _ImagesHandler_SetImage_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetImage",
			Handler:       _ImagesHandler_GetImage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc/proto/images_handler.proto",
}
